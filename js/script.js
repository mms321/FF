document.addEventListener('DOMContentLoaded', () => {
  const arrayOfLoveWishes = [
    "–ù–µ—Ö–∞–π –∑–µ–ª–µ–Ω—å –∂–∏—Ç—Ç—è –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Å–ø–æ–∫—ñ–π —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è!",
    "–ë–∞–∂–∞—é —Ä–æ—Å—Ç—É, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –π –≥–∞—Ä–º–æ–Ω—ñ—ó ‚Äî —É –∑–µ–ª–µ–Ω–∏—Ö —Ç–æ–Ω–∞—Ö!",
    "–ù–µ—Ö–∞–π –∫–æ–∂–µ–Ω –¥–µ–Ω—å –±—É–¥–µ —è–∫ —Å–≤—ñ–∂–∞ –≤–µ—Å–Ω—è–Ω–∞ —Ç—Ä–∞–≤–∞ ‚Äî –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –µ–Ω–µ—Ä–≥—ñ—î—é.",
    "–•–∞–π –∂–∏—Ç—Ç—è —Ü–≤—ñ—Ç–µ, —è–∫ —Å–∞–¥ –ø—ñ—Å–ª—è –¥–æ—â—É ‚Äî –±—ñ–ª—å—à–µ –∑–µ–ª–µ–Ω–∏—Ö –º–∏—Ç—Ç—î–≤–æ—Å—Ç–µ–π!",
    "–ë–∞–∂–∞—é –º–∏—Ä—É, –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ –≥–∞—Ä–º–æ–Ω—ñ—ó, —â–æ –¥–∞—î –∑–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä.",
    "–ù–µ—Ö–∞–π —É –≤–∞—à–æ–º—É –¥–æ–º—ñ –±—É–¥–µ –±—ñ–ª—å—à–µ —Ä–æ—Å–ª–∏–Ω, —Ç–µ–ø–ª–∞ —ñ –∑–µ–ª–µ–Ω—ñ!",
    "–ë–∞–∂–∞—é –Ω–æ–≤–∏—Ö –ø–æ—á–∏–Ω–∞–Ω—å —ñ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è, —è–∫ —É –¥–µ—Ä–µ–≤–∞.",
    "–ù–µ—Ö–∞–π –≤–∞—à—ñ –º—Ä—ñ—ó —Ä–æ—Å—Ç—É—Ç—å —ñ –º—ñ—Ü–Ω—ñ—à–∞—é—Ç—å, —è–∫ –∫–æ—Ä—ñ–Ω–Ω—è –≤ –∑–µ–º–ª—ñ.",
    "–ë–∞–∂–∞—é –∑–∞—Ç–∏—à–∫—É, –±–∞–ª–∞–Ω—Å—É —ñ —Å–≤—ñ–∂–æ–≥–æ –ø–æ–≥–ª—è–¥—É –Ω–∞ –∂–∏—Ç—Ç—è.",
    "–•–∞–π –∫–æ–ª—ñ—Ä –≤–∞—à–æ—ó –º—Ä—ñ—ó –±—É–¥–µ –¥–∂–µ—Ä–µ–ª–æ–º —Ä–∞–¥–æ—Å—Ç—ñ —Ç–∞ —Å–ø–æ–∫–æ—é!",
    "–ù–µ—Ö–∞–π –∑–µ–ª–µ–Ω—å –Ω–∞–≤–∫–æ–ª–æ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞ –¥–æ–±—Ä—ñ –≤—á–∏–Ω–∫–∏ –π —Ç–≤–æ—Ä—á—ñ—Å—Ç—å.",
    "–ë–∞–∂–∞—é –∑–Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–∞–ª–∞–Ω—Å —ñ —Å–∏–ª—É, —è–∫ —É –º—ñ—Ü–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞."
  ];

  const btn = document.getElementById('btn_love_wishes');
  const loveEl = document.getElementById('love-wishes');
  const rangeEl = document.getElementById('snowRange');
  const rangeValueEl = document.getElementById('range-value');

  // –ü–æ–±–∞–∂–∞–Ω–Ω—è ‚Äî –≤–∞—Ä—Ç—ñ—Å—Ç—å 1 –±–∞–ª
  const WISH_COST = 1;

  if (btn && loveEl) {
    btn.addEventListener('click', () => {
      const stored = Number(localStorage.getItem('ff_score') || 0);
      if (stored >= WISH_COST) {
        const index = Math.floor(Math.random() * arrayOfLoveWishes.length);
        loveEl.textContent = arrayOfLoveWishes[index];
        localStorage.setItem('ff_score', String(stored - WISH_COST));
        const scoreEl = document.getElementById('game-score');
        if (scoreEl) scoreEl.textContent = String(stored - WISH_COST);
        loveEl.style.opacity = 0;
        requestAnimationFrame(() => {
          loveEl.style.transition = 'opacity 0.45s ease';
          loveEl.style.opacity = 1;
        });
      } else {
        loveEl.textContent = `–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ ${WISH_COST - stored} –±–∞–ª(—ñ–≤) –¥–ª—è –ø–æ–±–∞–∂–∞–Ω–Ω—è. –ì—Ä–∞–π—Ç–µ —É –º—ñ–Ω—ñ-–≥—Ä–Ω—É, —â–æ–± –∑–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏.`;
        loveEl.style.opacity = 0;
        requestAnimationFrame(() => {
          loveEl.style.transition = 'opacity 0.35s ease';
          loveEl.style.opacity = 1;
        });
      }
    });
  }

  // --- –õ–∏—Å—Ç–æ—á–∫–∏ / –ø–æ–≤–∑—É–Ω–æ–∫ (–∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î) ---
  // (—Å–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ ‚Äî –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∏—Å—Ç–æ—á–∫—ñ–≤)
  let intervalId = null;
  let createInterval = 400;
  let leafSize = 28;
  let leafSpeed = 2.2;
  function lerp(a,b,t){ return a + (b - a) * t; }
  function updateRangeLabel(t){
    if (!rangeValueEl) return;
    if (t < 0.33) rangeValueEl.textContent = '–ù–∏–∑—å–∫–∞';
    else if (t < 0.66) rangeValueEl.textContent = '–°–µ—Ä–µ–¥–Ω—è';
    else rangeValueEl.textContent = '–í–∏—Å–æ–∫–∞';
  }
  function updateSettings(){
    if (!rangeEl) return;
    const min = 100, max = 1200;
    const minSize = 18, maxSize = 48;
    const minSpeed = 0.9, maxSpeed = 4.0;
    const value = Number(rangeEl.value);
    const t = Math.max(0, Math.min(1, (value - min) / (max - min)));
    createInterval = Math.max(30, Math.round(lerp(max, min, t)));
    leafSize = Math.round(lerp(maxSize, minSize, t));
    leafSpeed = lerp(minSpeed, maxSpeed, t);
    updateRangeLabel(t);
    if (intervalId) clearInterval(intervalId);
    intervalId = setInterval(createLeaf, Math.max(20, createInterval));
  }
  function createLeaf(){
    const leaf = document.createElement('div');
    leaf.className = 'leaf';
    leaf.innerText = 'üçÉ';
    const startX = Math.random() * (window.innerWidth - 40);
    const size = Math.random() * (leafSize * 0.5) + leafSize * 0.5;
    leaf.style.left = `${startX}px`;
    leaf.style.top = '-64px';
    leaf.style.fontSize = `${size}px`;
    leaf.style.opacity = (Math.random() * 0.6 + 0.35).toString();
    document.body.appendChild(leaf);
    const speed = Math.random() * leafSpeed + leafSpeed * 0.5;
    let drift = (Math.random() - 0.5) * 2.8;
    let rot = (Math.random() - 0.5) * 20;
    let top = -64;
    let left = startX;
    function fall(){
      top += speed;
      left += drift;
      rot += (Math.random() - 0.5) * 4;
      leaf.style.transform = `translate(${left}px, ${top}px) rotate(${rot}deg)`;
      if (top < window.innerHeight + 80) requestAnimationFrame(fall);
      else leaf.remove();
    }
    requestAnimationFrame(fall);
  }
  if (rangeEl){ rangeEl.addEventListener('input', updateSettings); updateSettings(); }
  window.addEventListener('beforeunload', () => { if (intervalId) clearInterval(intervalId); });

  // --- –ú—ñ–Ω—ñ-–≥—Ä–∞: –≤–≥–∞–¥–∞–π –≤—ñ–¥—Ç—ñ–Ω–æ–∫ –∑–µ–ª–µ–Ω–æ–≥–æ –∑ –æ–±–º–µ–∂–µ–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ø—Ä–æ–± ---
  (function colorMatchGame(){
    const optionsCount = 6;
    const targetEl = document.getElementById('game-target');
    const optionsWrap = document.getElementById('game-options');
    const newBtn = document.getElementById('game-new');
    const scoreEl = document.getElementById('game-score');
    const attemptsEl = document.getElementById('game-attempts');
    const messageEl = document.getElementById('game-message');

    if (!targetEl || !optionsWrap || !newBtn) return;

    const MAX_ATTEMPTS = 3;
    let score = Number(localStorage.getItem('ff_score') || 0);
    let attemptsLeft = MAX_ATTEMPTS;
    let targetColor = '';

    function rand(min,max){ return Math.random()*(max-min)+min; }
    function makeShade(baseLightness){
      const h = 122 + Math.round(rand(-6,6));
      const s = Math.round(rand(40,85));
      const l = Math.round(Math.max(14, Math.min(78, baseLightness + rand(-6,6))));
      return `hsl(${h} ${s}% ${l}%)`;
    }
    function pickColors(){
      const base = Math.round(rand(28,62));
      const colors = [];
      for(let i=0;i<optionsCount;i++) colors.push(makeShade(base + (i - Math.floor(optionsCount/2))*6));
      return colors.sort(()=>Math.random()-0.5);
    }
    function updateUI(){
      if (scoreEl) scoreEl.textContent = String(score);
      if (attemptsEl) attemptsEl.textContent = String(attemptsLeft);
    }
    function startRound(){
      clearOptions();
      messageEl.textContent = `–ù–æ–≤–∞ —Å–ø—Ä–æ–±–∞: —É –≤–∞—Å ${MAX_ATTEMPTS} —Å–ø—Ä–æ–±(–∏).`;
      attemptsLeft = MAX_ATTEMPTS;
      updateUI();
      const colors = pickColors();
      targetColor = colors[Math.floor(Math.random()*colors.length)];
      targetEl.style.background = targetColor;
      colors.forEach(c=>{
        const btn = document.createElement('button');
        btn.className = 'game-option';
        btn.type = 'button';
        btn.style.background = c;
        btn.dataset.color = c;
        btn.addEventListener('click', () => onChoose(btn));
        optionsWrap.appendChild(btn);
      });
    }
    function clearOptions(){ while(optionsWrap.firstChild) optionsWrap.removeChild(optionsWrap.firstChild); }

    function onChoose(btn){
      const color = btn.dataset.color;
      const all = Array.from(optionsWrap.children);
      all.forEach(el=> el.style.pointerEvents='none');

      if (color === targetColor){
        btn.classList.add('correct');
        score++;
        messageEl.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 1 –±–∞–ª. –ó–∞–≥–∞–ª–æ–º: ${score} –±–∞–ª(—ñ–≤).`;
        localStorage.setItem('ff_score', String(score));
        setTimeout(startRound, 900);
      } else {
        btn.classList.add('wrong');
        attemptsLeft--;
        if (attemptsLeft > 0){
          messageEl.textContent = `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${attemptsLeft} —Å–ø—Ä–æ–±(–∏).`;
          // –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—É–Ω–¥ ‚Äî —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏
          all.forEach(el=> el.style.pointerEvents='auto');
          // –±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–∞–º–µ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç –¥–∞–ª—ñ
          btn.style.pointerEvents = 'none';
          if (attemptsEl) attemptsEl.textContent = String(attemptsLeft);
          return;
        } else {
          // —Å–ø—Ä–æ–± –Ω–µ –ª–∏—à–∏–ª–æ—Å—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —ñ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥
          messageEl.textContent = '–°–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω—ñ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –ø—ñ–¥—Å–≤—ñ—á–µ–Ω–æ.';
          const correct = all.find(el => el.dataset.color === targetColor);
          if (correct) correct.classList.add('correct');
          setTimeout(startRound, 1200);
        }
      }

      // –æ–Ω–æ–≤–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ UI –ø—Ä–∏ –≤–¥–∞–ª–æ–º—É –≤–≥–∞–¥—É–≤–∞–Ω–Ω—ñ
      localStorage.setItem('ff_score', String(score));
      updateUI();
    }

    newBtn.addEventListener('click', () => {
      score = 0;
      localStorage.setItem('ff_score', String(score));
      attemptsLeft = MAX_ATTEMPTS;
      updateUI();
      startRound();
    });

    updateUI();
    startRound();
  })();
  (function colorMatchGame(){
    const optionsCount = 5; // –∑–º—ñ–Ω–∏–≤ –∑ 6 –Ω–∞ 5
    const targetEl = document.getElementById('game-target');
    const optionsWrap = document.getElementById('game-options');
    const newBtn = document.getElementById('game-new');
    const scoreEl = document.getElementById('game-score');
    const attemptsEl = document.getElementById('game-attempts');
    const messageEl = document.getElementById('game-message');

    if (!targetEl || !optionsWrap || !newBtn) return;

    // ...existing code (–±–µ–∑ –∑–º—ñ–Ω) ...

    function pickColors(){
      const base = Math.round(rand(28,62));
      const colors = [];
      for(let i=0;i<optionsCount;i++) colors.push(makeShade(base + (i - Math.floor(optionsCount/2))*6));
      return colors.sort(()=>Math.random()-0.5);
    }

    // ...existing code (–±–µ–∑ –∑–º—ñ–Ω) ...
  })();

});